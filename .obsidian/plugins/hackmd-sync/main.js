/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var R=Object.create;var h=Object.defineProperty;var H=Object.getOwnPropertyDescriptor;var I=Object.getOwnPropertyNames;var F=Object.getPrototypeOf,O=Object.prototype.hasOwnProperty;var x=(a,n)=>()=>(n||a((n={exports:{}}).exports,n),n.exports),A=(a,n)=>{for(var t in n)h(a,t,{get:n[t],enumerable:!0})},k=(a,n,t,e)=>{if(n&&typeof n=="object"||typeof n=="function")for(let i of I(n))!O.call(a,i)&&i!==t&&h(a,i,{get:()=>n[i],enumerable:!(e=H(n,i))||e.enumerable});return a};var U=(a,n,t)=>(t=a!=null?R(F(a)):{},k(n||!a||!a.__esModule?h(t,"default",{value:a,enumerable:!0}):t,a)),L=a=>k(h({},"__esModule",{value:!0}),a);var M=x(d=>{"use strict";Object.defineProperty(d,"__esModule",{value:!0});d.NotePermissionRole=d.CommentPermissionType=d.NotePublishType=d.TeamVisibilityType=void 0;var W;(function(a){a.PUBLIC="public",a.PRIVATE="private"})(W=d.TeamVisibilityType||(d.TeamVisibilityType={}));var V;(function(a){a.EDIT="edit",a.VIEW="view",a.SLIDE="slide",a.BOOK="book"})(V=d.NotePublishType||(d.NotePublishType={}));var $;(function(a){a.DISABLED="disabled",a.FORBIDDEN="forbidden",a.OWNERS="owners",a.SIGNED_IN_USERS="signed_in_users",a.EVERYONE="everyone"})($=d.CommentPermissionType||(d.CommentPermissionType={}));var z;(function(a){a.OWNER="owner",a.SIGNED_IN="signed_in",a.GUEST="guest"})(z=d.NotePermissionRole||(d.NotePermissionRole={}))});var B={};A(B,{default:()=>P});module.exports=L(B);var c=require("obsidian");var D=require("obsidian");var m=class extends Error{constructor(t,e="unknown",i){super(t);this.type=e,this.statusCode=i,this.name="HackMDError"}static fromApiError(t){switch(t.status){case 401:return new m("Authentication failed. Please check your access token.","auth_failed",401);case 403:return new m("Not authorized to perform this action.","permission_denied",403);case 404:return new m("Resource not found.","not_found",404);default:return new m(`Request failed: ${t.message}`,"unknown",t.status)}}};var g=class{constructor(n){this.baseUrl="https://api.hackmd.io/v1";this.headers={Authorization:`Bearer ${n}`,"Content-Type":"application/json",Accept:"application/json"}}async request(n,t,e){let i=`${this.baseUrl}${t}`;try{let s=await(0,D.requestUrl)({url:i,method:n,headers:{...this.headers,"Content-Type":"application/json"},body:e?JSON.stringify(e):void 0});return s.status===204||s.text.length===0?{status:s.status,data:null,ok:!0}:s.status===202?{status:s.status,data:null,ok:!0}:{status:s.status,data:s.json,ok:s.status>=200&&s.status<300}}catch(s){if(console.error("Request failed:",{url:i,method:n,status:s.status,message:s.message}),n==="DELETE"&&s.status===404)return{status:404,data:null,ok:!0};throw this.handleApiError(s)}}handleApiError(n){switch(n.status){case 401:return new m("Authentication failed. Please check your access token.","auth_failed",401);case 403:return new m("Not authorized to perform this action.","permission_denied",403);case 404:return new m("Resource not found.","not_found",404);default:return new m(`Request failed: ${n.message}`,"unknown",n.status)}}async getMe(){return(await this.request("GET","/me")).data}async getNote(n){return(await this.request("GET",`/notes/${n}`)).data}async createNote(n){let t={title:n.title||"Untitled",content:n.content||"",readPermission:n.readPermission,writePermission:n.writePermission,commentPermission:n.commentPermission};return(await this.request("POST","/notes",t)).data}async updateNote(n,t){let e=await this.request("PATCH",`/notes/${n}`,t);return e.status===202?(await new Promise(i=>setTimeout(i,1e3)),this.getNote(n)):e.data}async deleteNote(n){return(await this.request("DELETE",`/notes/${n}`)).status===404&&console.debug(`Note ${n} was already deleted or doesn't exist`),!0}};var u=require("obsidian"),l=U(M()),N={accessToken:"",defaultReadPermission:l.NotePermissionRole.OWNER,defaultWritePermission:l.NotePermissionRole.OWNER,defaultCommentPermission:l.CommentPermissionType.DISABLED,noteIdMap:{},lastSyncTimestamps:{}},f=class extends u.PluginSettingTab{constructor(t,e){super(t,e);this.plugin=e}display(){let{containerEl:t}=this;t.empty(),this.renderAccessTokenSetting(),this.renderPermissionSettings()}renderAccessTokenSetting(){new u.Setting(this.containerEl).setName("Token").setDesc("HackMD API access token (from hackmd.io \u2192 Settings \u2192 API \u2192 Create API token)").addText(t=>t.setPlaceholder("Enter your HackMD access token").setValue(this.plugin.settings.accessToken||"").onChange(async e=>{this.plugin.settings.accessToken=e,await this.plugin.saveData(this.plugin.settings),await this.plugin.initializeClient()}))}renderPermissionSettings(){this.renderReadPermissionSetting(),this.renderWritePermissionSetting(),this.renderCommentPermissionSetting()}renderReadPermissionSetting(){new u.Setting(this.containerEl).setName("Read Permission").setDesc("Read permission for new notes").addDropdown(t=>this.configurePermissionDropdown(t,[{value:l.NotePermissionRole.OWNER,label:"Owner"},{value:l.NotePermissionRole.SIGNED_IN,label:"Signed In Users"},{value:l.NotePermissionRole.GUEST,label:"Everyone"}],this.plugin.settings.defaultReadPermission,async e=>{this.plugin.settings.defaultReadPermission=e}))}renderWritePermissionSetting(){new u.Setting(this.containerEl).setName("Write Permission").setDesc("write permission for new notes").addDropdown(t=>this.configurePermissionDropdown(t,[{value:l.NotePermissionRole.OWNER,label:"Owner"},{value:l.NotePermissionRole.SIGNED_IN,label:"Signed In Users"},{value:l.NotePermissionRole.GUEST,label:"Everyone"}],this.plugin.settings.defaultWritePermission,async e=>{this.plugin.settings.defaultWritePermission=e,await this.plugin.saveData(this.plugin.settings)}))}renderCommentPermissionSetting(){new u.Setting(this.containerEl).setName("Comment Permission").setDesc("comment permission for new notes").addDropdown(t=>this.configurePermissionDropdown(t,[{value:l.CommentPermissionType.DISABLED,label:"Disabled"},{value:l.CommentPermissionType.FORBIDDEN,label:"Forbidden"},{value:l.CommentPermissionType.OWNERS,label:"Owner"},{value:l.CommentPermissionType.SIGNED_IN_USERS,label:"Signed In Users"},{value:l.CommentPermissionType.EVERYONE,label:"Everyone"}],this.plugin.settings.defaultCommentPermission,async e=>{this.plugin.settings.defaultCommentPermission=e,await this.plugin.saveData(this.plugin.settings)}))}configurePermissionDropdown(t,e,i,s){return e.forEach(({value:o,label:r})=>{t.addOption(o,r)}),t.setValue(i).onChange(s)}};var S=require("obsidian"),w=class extends S.Modal{constructor(){super(...arguments);this.loading=!1}createModalContent(t,e,i){let{contentEl:s}=this;s.createEl("h3",{text:t}),s.createEl("p",{text:e}),i.addClass("modal-button-container")}createButton(t,e,i,s=!1){let o=t.createEl("button",{text:e});return s&&o.addClass("mod-warning"),o.addEventListener("click",async()=>{this.loading||await this.handleButtonClick(o,i)}),o}async handleButtonClick(t,e){let i=t.getText();try{this.setLoading(!0),t.setText("Processing..."),await e()}finally{this.setLoading(!1),t.setText(i)}}setLoading(t){this.loading=t,this.contentEl.findAll("button").forEach(e=>{t?e.setAttr("disabled","true"):e.removeAttribute("disabled")})}onClose(){let{contentEl:t}=this;t.empty()}},y=class extends w{constructor(t,e,i){super(t);this.config=e,this.onConfirm=i}onOpen(){let t=this.contentEl.createDiv();this.createModalContent(this.config.title,this.config.message,t),this.createButton(t,this.config.cancelText||"Cancel",()=>this.close()),this.createButton(t,this.config.confirmText||"Confirm",async()=>{try{await this.onConfirm(),this.close()}catch(e){console.error("Confirmation action failed:",e),this.contentEl.createDiv("modal-error").setText(e.message)}},this.config.warning)}},T=class extends y{constructor(n,t,e){super(n,{title:"Delete HackMD Note",message:`Are you sure you want to delete the HackMD note for "${t}"? This will remove the note from HackMD and remove all HackMD metadata from the local file.`,confirmText:"Delete",warning:!0},e)}},v={createConfirmModal(a,n,t,e,i={}){return new y(a,{title:n,message:t,...i},e)},createDeleteModal(a,n,t){return new T(a,n,t)}};var P=class extends c.Plugin{constructor(){super(...arguments);this.client=null}async onload(){this.settings=Object.assign({},N,await this.loadData()),this.settings.accessToken&&await this.initializeClient(),this.registerCommands(),this.addSettingTab(new f(this.app,this))}registerCommands(){this.addCommand({id:"push",name:"Push",editorCallback:this.createEditorCallback(this.pushToHackMD.bind(this))}),this.addCommand({id:"pull",name:"Pull",editorCallback:this.createEditorCallback(this.pullFromHackMD.bind(this))}),this.addCommand({id:"force-push",name:"Force Push",editorCallback:this.createEditorCallback((t,e)=>this.pushToHackMD(t,e,"force"))}),this.addCommand({id:"force-pull",name:"Force Pull",editorCallback:this.createEditorCallback((t,e)=>this.pullFromHackMD(t,e,"force"))}),this.addCommand({id:"copy-url",name:"Copy URL",editorCallback:this.createEditorCallback(this.copyHackMDUrl.bind(this))}),this.addCommand({id:"delete",name:"Delete Remote",editorCallback:this.createEditorCallback(this.deleteHackMDNote.bind(this))})}createEditorCallback(t){return async(e,i)=>{if(!this.client){new c.Notice("Please set up HackMD authentication in settings first");return}if(!i.file){new c.Notice("No active file");return}try{await t(e,i.file)}catch(s){console.error("Command failed:",s),new c.Notice(`Operation failed: ${s.message}`)}}}async initializeClient(){try{this.client=new g(this.settings.accessToken),await this.client.getMe()}catch(t){console.error("Failed to initialize HackMD client:",t),new c.Notice("Failed to connect to HackMD. Please check your access token."),this.client=null}}async pushToHackMD(t,e,i="normal"){if(!this.client)throw new Error("Client not initialized");let{content:s,noteId:o}=await this.prepareSync(t);i==="normal"&&o&&await this.checkPushConflicts(e,o);let r=o?await this.updateRemoteNote(o,e,s):await this.createRemoteNote(e,s);await this.updateLocalMetadata(t,e,r),new c.Notice("Successfully pushed to HackMD!")}async pullFromHackMD(t,e,i="normal"){if(!this.client)throw new Error("Client not initialized");let{noteId:s}=await this.prepareSync(t);if(!s)throw new Error("This file has not been pushed to HackMD yet.");i==="normal"&&await this.checkPullConflicts(e);let o=await this.client.getNote(s);await this.updateLocalContent(t,e,o),new c.Notice("Successfully pulled from HackMD!")}async copyHackMDUrl(t){let{noteId:e}=await this.prepareSync(t);if(!e)throw new Error("This file has not been pushed to HackMD yet.");await navigator.clipboard.writeText(`https://hackmd.io/${e}`),new c.Notice("HackMD URL copied to clipboard!")}async deleteHackMDNote(t,e){var r;if(!this.client)throw new Error("Client not initialized");let{metadata:i}=await this.prepareSync(t),s=(r=i==null?void 0:i.hackmd)!=null&&r.url?C(i.hackmd.url):null;if(!s)throw new Error("This file is not linked to a HackMD note.");v.createDeleteModal(this.app,e.basename,async()=>{await this.client.deleteNote(s),await this.cleanupHackMDMetadata(t,e),new c.Notice("Successfully unlinked note from HackMD!")}).open()}async prepareSync(t){var o;if(!t)throw new Error("Editor not found");let e=t.getValue(),{frontmatter:i}=this.getFrontmatter(e),s=(o=i==null?void 0:i.hackmd)!=null&&o.url?C(i.hackmd.url):null;return{content:e,metadata:i,noteId:s}}getFrontmatter(t){let e=t.match(/^---\s*\n([\s\S]*?)\n---\s*\n/);if(!e)return{frontmatter:null,content:t,position:0};try{let i=(0,c.parseYaml)(e[1]),s=e[0].length,o=t.slice(s);return{frontmatter:i,content:o,position:s}}catch(i){return console.error("Failed to parse frontmatter:",i),{frontmatter:null,content:t,position:0}}}updateFrontmatter(t,e){let{frontmatter:i,content:s,position:o}=this.getFrontmatter(t),r=i||{};return"id"in e?r.hackmd=e:r={...r,...e},Object.keys(r).forEach(p=>{r[p]&&typeof r[p]=="object"&&Object.keys(r[p]).length===0&&delete r[p]}),Object.keys(r).length===0?o?s:t:`---
${(0,c.stringifyYaml)(r).trim()}
---
${o?s:t}`}async checkPushConflicts(t,e){if(!this.client)throw new Error("Client not initialized");let i=await this.client.getNote(e),s=this.settings.lastSyncTimestamps[t.path]||0;if(new Date(i.lastChangedAt||i.createdAt).getTime()>s)throw new m("remote note has been modified since last push. Use force sync to overwrite.","sync_conflict")}async checkPullConflicts(t){if(!this.client)throw new Error("Client not initialized");let e=this.settings.lastSyncTimestamps[t.path]||0;if(t.stat.mtime>e)throw new m("Local note has been modified since last sync. Use force sync to overwrite.","sync_conflict")}async createRemoteNote(t,e){if(!this.client)throw new Error("Client not initialized");return await this.client.createNote({content:e,title:t.basename,readPermission:this.settings.defaultReadPermission,writePermission:this.settings.defaultWritePermission,commentPermission:this.settings.defaultCommentPermission})}async updateRemoteNote(t,e,i){if(!this.client)throw new Error("Client not initialized");return await this.client.updateNote(t,{content:i,title:e.basename})}async updateLocalMetadata(t,e,i){let s={url:`https://hackmd.io/${i.id}`,title:i.title||e.basename,lastSync:new Date().toISOString()};i.teamPath&&(s.teamPath=i.teamPath);let o=t.getValue(),{frontmatter:r,content:E}=this.getFrontmatter(o),p={...r,hackmd:s},b=`---
`+(0,c.stringifyYaml)(p)+`---
`+E;t.setValue(b),this.settings.noteIdMap[e.path]=i.id||"",this.settings.lastSyncTimestamps[e.path]=Date.now(),await this.saveData(this.settings)}async updateLocalContent(t,e,i){let s={url:`https://hackmd.io/${i.id}`,title:i.title||e.basename,lastSync:new Date().toISOString()};i.teamPath&&(s.teamPath=i.teamPath);let o=this.updateFrontmatter(i.content||"",s);t.setValue(o),this.settings.lastSyncTimestamps[e.path]=Date.now(),await this.saveData(this.settings)}async cleanupHackMDMetadata(t,e){try{delete this.settings.noteIdMap[e.path],delete this.settings.lastSyncTimestamps[e.path],await this.saveData(this.settings);let i=t.getValue(),{frontmatter:s,content:o}=this.getFrontmatter(i);if(s)if(delete s.hackmd,Object.keys(s).length>0){let r=(0,c.stringifyYaml)(s).trim();t.setValue(`---
${r}
---
${o}`)}else t.setValue(o.trim())}catch(i){throw console.error("Failed to clean up HackMD metadata:",i),new Error("Failed to clean up HackMD metadata: "+i.message)}}};function C(a){let n=a.match(/hackmd\.io\/(?:@[^/]+\/)?([a-zA-Z0-9_-]+)/);return n?n[1]:null}

/* nosourcemap */